<?xml version="1.0" ?>

<!-- Copyright (c) 2016 The UUV Simulator Authors.
     All rights reserved.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<robot name="rexrov">
  <!-- Some pretty colors -->
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material>
  <material name="grey2">
    <color rgba="0.9 0.9 0.9 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.5 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <material name="black">
    <color rgba="0.05 0.05 0.05 1.0"/>
  </material>
  <!-- ROTOR DYNAMICS MACROS -->
  <!-- First order dynamics -->
  <!--
    MACROS FOR CONVERSION FUNCTIONS BETWEEN ROTOR'S ANG. VELOCITY AND
    THRUSTER FORCE
  -->
  <!-- THRUSTER MODULE MACROS  -->
  <!--
    Thruster model with first order dynamic model for the rotor dynamics
    and a proportional non-linear steady-state conversion from the rotor's
    angular velocity to output thrust force
  -->
  <!-- base_link according to ROS conventions: x forward, z up -->
  <link name="rexrox/base_link">
    <inertial>
      <mass value="1862.87"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="525.39" ixy="1.44" ixz="33.41" iyy="794.20" iyz="2.6" izz="691.23"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://uuv_descriptions/meshes/RexROV_no_props_modified.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <!-- bottom plate -->
    <collision>
      <origin rpy="0 0 0" xyz="0 0 -0.75"/>
      <geometry>
        <box size="2.56 1.50 0.10"/>
      </geometry>
    </collision>
    <!-- top plate -->
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.60"/>
      <geometry>
        <box size="2.56 1.50 0.40"/>
      </geometry>
    </collision>
    <!-- left / right sides -->
    <collision>
      <origin rpy="0 0 0" xyz="-0.20 0.70 -0.15"/>
      <geometry>
        <box size="2.20 0.10 1.10"/>
      </geometry>
    </collision>
    <collision>
      <origin rpy="0 0 0" xyz="-0.20 -0.70 -0.15"/>
      <geometry>
        <box size="2.20 0.10 1.10"/>
      </geometry>
    </collision>
  </link>
  <!-- Set up hydrodynamic plugin given as input parameter -->
  <gazebo>
    <plugin filename="libuuv_underwater_object_ros_plugin.so" name="uuv_plugin">
      <fluid_density>1028.0</fluid_density>
      <flow_velocity_topic>hydrodynamics/current_velocity</flow_velocity_topic>
      <debug>0</debug>
      <link name="rexrox/base_link">
        <neutrally_buoyant>0</neutrally_buoyant>
        <volume>1.83826</volume>
        <box>
          <width>1.5</width>
          <length>2.6</length>
          <height>1.6</height>
        </box>
        <center_of_buoyancy>0.0 0.0 0.3</center_of_buoyancy>
        <hydrodynamic_model>
          <type>fossen</type>
          <!-- Added mass: see p.28 in Berg2012 -->
          <added_mass>
                     779.79 -6.8773 -103.32  8.5426 -165.54 -7.8033
                    -6.8773    1222   51.29  409.44 -5.8488  62.726
                    -103.32   51.29  3659.9  6.1112 -386.42  10.774
                     8.5426  409.44  6.1112   534.9 -10.027  21.019
                    -165.54 -5.8488 -386.42 -10.027  842.69 -1.1162
                    -7.8033  62.726  10.775  21.019 -1.1162  224.32
                </added_mass>
          <!-- Linear damping: see p.31 in Berg2012 -->
          <linear_damping>
                    -74.82 -69.48 -728.4 -268.8 -309.77 -105
                </linear_damping>
          <!-- Non-linear damping: see p.30 in Berg2012 -->
          <quadratic_damping>
                    -748.22 -992.53 -1821.01 -672 -774.44 -523.27
                </quadratic_damping>
        </hydrodynamic_model>
      </link>
    </plugin>
  </gazebo>
  <!-- optional: plugin to test compare Gazebo's returned accelerations
    <gazebo>
      <plugin name="${namespace}_test_plugin" filename="libuuv_accelerations_test_plugin.so">
        <link_name>${namespace}/base_link</link_name>
      </plugin>
    </gazebo> -->
  <joint name="rexrox/thruster_0_joint" type="continuous">
    <origin rpy="0.0 -1.3007937037 -0.9286895609" xyz="-0.890895 0.334385 0.528822"/>
    <axis xyz="1 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/thruster_0"/>
  </joint>
  <link name="rexrox/thruster_0">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://uuv_descriptions/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libuuv_thruster_ros_plugin.so" name="rexrox_0_thruster_model">
      <linkName>rexrox/thruster_0</linkName>
      <jointName>rexrox/thruster_0_joint</jointName>
      <thrusterID>0</thrusterID>
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00031</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="rexrox/thruster_0">
    <selfCollide>false</selfCollide>
  </gazebo>
  <joint name="rexrox/thruster_1_joint" type="continuous">
    <origin rpy="0.0 -1.3007937037 0.9286895609" xyz="-0.890895 -0.334385 0.528822"/>
    <axis xyz="1 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/thruster_1"/>
  </joint>
  <link name="rexrox/thruster_1">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://uuv_descriptions/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libuuv_thruster_ros_plugin.so" name="rexrox_1_thruster_model">
      <linkName>rexrox/thruster_1</linkName>
      <jointName>rexrox/thruster_1_joint</jointName>
      <thrusterID>1</thrusterID>
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00031</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="rexrox/thruster_1">
    <selfCollide>false</selfCollide>
  </gazebo>
  <joint name="rexrox/thruster_2_joint" type="continuous">
    <origin rpy="0.0 -1.8407984963 0.9286895609" xyz="0.890895 0.334385 0.528822"/>
    <axis xyz="1 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/thruster_2"/>
  </joint>
  <link name="rexrox/thruster_2">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://uuv_descriptions/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libuuv_thruster_ros_plugin.so" name="rexrox_2_thruster_model">
      <linkName>rexrox/thruster_2</linkName>
      <jointName>rexrox/thruster_2_joint</jointName>
      <thrusterID>2</thrusterID>
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00031</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="rexrox/thruster_2">
    <selfCollide>false</selfCollide>
  </gazebo>
  <joint name="rexrox/thruster_3_joint" type="continuous">
    <origin rpy="0.0 -1.8407984963 -0.9286895609" xyz="0.890895 -0.334385 0.528822"/>
    <axis xyz="1 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/thruster_3"/>
  </joint>
  <link name="rexrox/thruster_3">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://uuv_descriptions/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libuuv_thruster_ros_plugin.so" name="rexrox_3_thruster_model">
      <linkName>rexrox/thruster_3</linkName>
      <jointName>rexrox/thruster_3_joint</jointName>
      <thrusterID>3</thrusterID>
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00031</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="rexrox/thruster_3">
    <selfCollide>false</selfCollide>
  </gazebo>
  <joint name="rexrox/thruster_4_joint" type="continuous">
    <origin rpy="0.0 0.0 0.78539805" xyz="-0.412125 0.505415 0.129"/>
    <axis xyz="1 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/thruster_4"/>
  </joint>
  <link name="rexrox/thruster_4">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://uuv_descriptions/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libuuv_thruster_ros_plugin.so" name="rexrox_4_thruster_model">
      <linkName>rexrox/thruster_4</linkName>
      <jointName>rexrox/thruster_4_joint</jointName>
      <thrusterID>4</thrusterID>
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00031</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="rexrox/thruster_4">
    <selfCollide>false</selfCollide>
  </gazebo>
  <joint name="rexrox/thruster_5_joint" type="continuous">
    <origin rpy="0.0 0.0 -0.78539805" xyz="-0.412125 -0.505415 0.129"/>
    <axis xyz="1 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/thruster_5"/>
  </joint>
  <link name="rexrox/thruster_5">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://uuv_descriptions/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libuuv_thruster_ros_plugin.so" name="rexrox_5_thruster_model">
      <linkName>rexrox/thruster_5</linkName>
      <jointName>rexrox/thruster_5_joint</jointName>
      <thrusterID>5</thrusterID>
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00031</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="rexrox/thruster_5">
    <selfCollide>false</selfCollide>
  </gazebo>
  <joint name="rexrox/thruster_6_joint" type="continuous">
    <origin rpy="0.0 0.0 2.35619415" xyz="0.412125 0.505415 0.129"/>
    <axis xyz="1 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/thruster_6"/>
  </joint>
  <link name="rexrox/thruster_6">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://uuv_descriptions/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libuuv_thruster_ros_plugin.so" name="rexrox_6_thruster_model">
      <linkName>rexrox/thruster_6</linkName>
      <jointName>rexrox/thruster_6_joint</jointName>
      <thrusterID>6</thrusterID>
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00031</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="rexrox/thruster_6">
    <selfCollide>false</selfCollide>
  </gazebo>
  <joint name="rexrox/thruster_7_joint" type="continuous">
    <origin rpy="0.0 0.0 -2.35619415" xyz="0.412125 -0.505415 0.129"/>
    <axis xyz="1 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/thruster_7"/>
  </joint>
  <link name="rexrox/thruster_7">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://uuv_descriptions/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
  </link>
  <gazebo>
    <plugin filename="libuuv_thruster_ros_plugin.so" name="rexrox_7_thruster_model">
      <linkName>rexrox/thruster_7</linkName>
      <jointName>rexrox/thruster_7_joint</jointName>
      <thrusterID>7</thrusterID>
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.00031</rotorConstant>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="rexrox/thruster_7">
    <selfCollide>false</selfCollide>
  </gazebo>
  <link name="rexrox/dvl_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://uuv_sensor_ros_plugins/meshes/dvl.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/dvl_joint" type="revolute">
    <origin rpy="0 1.5707963267948966 0" xyz="-1.4 0 -0.312"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/dvl_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <link name="rexrox/dvl_sonar0_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/dvl_sonar0_joint" type="revolute">
    <origin rpy="0 -0.52 0.0" xyz="0 0 0"/>
    <parent link="rexrox/dvl_link"/>
    <child link="rexrox/dvl_sonar0_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="rexrox/dvl_sonar0_link">
    <sensor name="dvl_sonar0" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>7</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.55</min>
          <max>81</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar0">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>7</updateRate>
        <topicName>dvl_sonar0</topicName>
        <frameName>rexrox/dvl_sonar0_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <link name="rexrox/dvl_sonar1_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/dvl_sonar1_joint" type="revolute">
    <origin rpy="0 0 0.52" xyz="0 0 0"/>
    <parent link="rexrox/dvl_link"/>
    <child link="rexrox/dvl_sonar1_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="rexrox/dvl_sonar1_link">
    <sensor name="dvl_sonar1" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>7</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.55</min>
          <max>81</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar1">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>7</updateRate>
        <topicName>dvl_sonar1</topicName>
        <frameName>rexrox/dvl_sonar1_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <link name="rexrox/dvl_sonar2_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/dvl_sonar2_joint" type="revolute">
    <origin rpy="0 0.52 0.0" xyz="0 0 0"/>
    <parent link="rexrox/dvl_link"/>
    <child link="rexrox/dvl_sonar2_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="rexrox/dvl_sonar2_link">
    <sensor name="dvl_sonar2" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>7</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.55</min>
          <max>81</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar2">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>7</updateRate>
        <topicName>dvl_sonar2</topicName>
        <frameName>rexrox/dvl_sonar2_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <link name="rexrox/dvl_sonar3_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/dvl_sonar3_joint" type="revolute">
    <origin rpy="0 0.0 -0.52" xyz="0 0 0"/>
    <parent link="rexrox/dvl_link"/>
    <child link="rexrox/dvl_sonar3_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="rexrox/dvl_sonar3_link">
    <sensor name="dvl_sonar3" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>7</update_rate>
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </horizontal>
          <vertical>
            <samples>3</samples>
            <resolution>1</resolution>
            <min_angle>-0.03</min_angle>
            <max_angle>0.03</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.55</min>
          <max>81</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="dvl_sonar3">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>7</updateRate>
        <topicName>dvl_sonar3</topicName>
        <frameName>rexrox/dvl_sonar3_link</frameName>
        <fov>0.06</fov>
        <radiation>ultrasound</radiation>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_dvl_plugin.so" name="libuuv_gazebo_dvl_plugin">
      <robot_namespace>rexrox</robot_namespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <link_name>rexrox/dvl_link</link_name>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensor_topic>dvl</sensor_topic>
      <!-- (string): name of the sensor output topic and prefix of service names -->
      <update_rate>7</update_rate>
      <!-- Update period [s] -->
      <noise_sigma>0</noise_sigma>
      <!-- std dev of position estimates in x, y, z [m/s] -->
      <noise_amplitude>0</noise_amplitude>
      <enable_gazebo_messages>false</enable_gazebo_messages>
      <enable_local_ned_frame>false</enable_local_ned_frame>
      <static_reference_frame>world_ned</static_reference_frame>
      <!-- Declaring the beams -->
      <beam_link_name_0>rexrox/dvl_sonar0_link</beam_link_name_0>
      <beam_link_name_1>rexrox/dvl_sonar1_link</beam_link_name_1>
      <beam_link_name_2>rexrox/dvl_sonar2_link</beam_link_name_2>
      <beam_link_name_3>rexrox/dvl_sonar3_link</beam_link_name_3>
      <!-- Declaring the beam output topics -->
      <beam_topic_0>dvl_sonar0</beam_topic_0>
      <beam_topic_1>dvl_sonar1</beam_topic_1>
      <beam_topic_2>dvl_sonar2</beam_topic_2>
      <beam_topic_3>dvl_sonar3</beam_topic_3>
    </plugin>
  </gazebo>
  <!-- Sensor link -->
  <link name="rexrox/magnetometer_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <!-- Sensor joint -->
  <joint name="rexrox/magnetometer_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/magnetometer_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_magnetometer_plugin.so" name="libuuv_gazebo_ros_magnetometer__plugin">
      <robot_namespace>rexrox</robot_namespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <link_name>rexrox/magnetometer_link</link_name>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensor_topic>magnetometer</sensor_topic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <update_rate>50</update_rate>
      <!-- Update period of accelerometer and gyroscope [s] -->
      <intensity>65.0</intensity>
      <!-- magnitude of magnetic field [muT] -->
      <reference_heading>3.141592653589793</reference_heading>
      <!-- reference heading [rad] -->
      <declination>0.0</declination>
      <!-- reference declination [rad] -->
      <inclination>1.0471975511965976</inclination>
      <!-- refernce inclination [rad] -->
      <noise_xy>1.0</noise_xy>
      <!-- Discrete-time std. dev. of output noise in xy-axis [muT] -->
      <noise_z>1.4</noise_z>
      <!-- Discrete-time std. dev. of output noise in z-axis [muT] -->
      <turn_on_bias>2.0</turn_on_bias>
      <!-- Std. dev. of turn-on-bias [muT] -->
      <noise_amplitude>0</noise_amplitude>
      <enable_gazebo_messages>false</enable_gazebo_messages>
      <enable_local_ned_frame>false</enable_local_ned_frame>
    </plugin>
  </gazebo>
  <link name="rexrox/rpt_link">
    <inertial>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0" ixz="0" iyy="0.000000017" iyz="0" izz="0.000000017"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://uuv_sensor_ros_plugins/meshes/rpt.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/rpt_joint" type="revolute">
    <origin rpy="0 0 0" xyz="-1.32 0 0.8"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/rpt_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_rpt_plugin.so" name="libuuv_gazebo_rpt_plugin">
      <robot_namespace>rexrox</robot_namespace>
      <!-- ros namespace in which the messages are published -->
      <link_name>rexrox/rpt_link</link_name>
      <!-- sensor link name -->
      <static_reference_frame>ssbl</static_reference_frame>
      <!-- name of the refernce frame of all position measurements -->
      <sensor_topic>rpt</sensor_topic>
      <!-- name of the sensor output topic and prefix of service name -->
      <update_rate>0.5</update_rate>
      <!-- Update period [s] -->
      <noise_sigma>0.0</noise_sigma>
      <!-- std dev of position estimates in x, y, z [m] -->
      <noise_amplitude>0.0</noise_amplitude>
      <enable_gazebo_messages>false</enable_gazebo_messages>
    </plugin>
  </gazebo>
  <link name="rexrox/pressure_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://uuv_sensor_ros_plugins/meshes/pressure.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/pressure_joint" type="revolute">
    <origin rpy="0 0 0" xyz="-1.32 0.5 0.85"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/pressure_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_subsea_pressure_plugin.so" name="libuuv_gazebo_subseapressure_plugin">
      <robot_namespace>rexrox</robot_namespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <link_name>rexrox/pressure_link</link_name>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensor_topic>pressure</sensor_topic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <update_rate>10</update_rate>
      <!-- Update period of accelerometer and gyroscope [s] -->
      <saturation>30000</saturation>
      <!-- measurement range [kPa] -->
      <noise_sigma>3.0</noise_sigma>
      <!-- measurement stddev [kPa] -->
      <noise_amplitude>0.0</noise_amplitude>
      <estimate_depth_on>False</estimate_depth_on>
      <!-- infer depth? -->
      <standard_pressure>101.325</standard_pressure>
      <!-- pressure at sea level (depth 0 m) [kPa] -->
      <kPa_per_meter>9.80638</kPa_per_meter>
      <!-- increase in pressure [kPa] per [m] in increased depth -->
      <enable_gazebo_messages>false</enable_gazebo_messages>
    </plugin>
  </gazebo>
  <!-- IMU link -->
  <link name="rexrox/imu_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- IMU joint -->
  <joint name="rexrox/imu_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/imu_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_imu_plugin.so" name="libuuv_gazebo_imu_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
      <robot_namespace>rexrox</robot_namespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <link_name>rexrox/imu_link</link_name>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensor_topic>imu</sensor_topic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <gyroscope_noise_density>0.0003394</gyroscope_noise_density>
      <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
      <gyroscope_random_walk>3.8785e-05</gyroscope_random_walk>
      <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
      <gyroscope_bias_correlation_time>1000.0</gyroscope_bias_correlation_time>
      <!-- Gyroscope bias correlation time constant [s] -->
      <gyroscope_turn_on_bias_sigma>0.0087</gyroscope_turn_on_bias_sigma>
      <!-- Gyroscope turn on bias standard deviation [rad/s] -->
      <accelerometer_noise_density>0.004</accelerometer_noise_density>
      <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
      <accelerometer_random_walk>0.006</accelerometer_random_walk>
      <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
      <accelerometer_bias_correlation_time>300.0</accelerometer_bias_correlation_time>
      <!-- Accelerometer bias correlation time constant [s] -->
      <accelerometer_turn_on_bias_sigma>0.196</accelerometer_turn_on_bias_sigma>
      <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
      <orientation_noise>0.01</orientation_noise>
      <update_rate>50</update_rate>
      <!-- Update period of accelerometer and gyroscope [s] -->
      <enable_gazebo_messages>false</enable_gazebo_messages>
      <enable_local_ned_frame>True</enable_local_ned_frame>
      <static_reference_frame>world_ned</static_reference_frame>
    </plugin>
  </gazebo>
  <!-- Sensor link -->
  <link name="rexrox/camera_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.1"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://uuv_sensor_ros_plugins/meshes/oe14-372.dae" scale="1.0 1.0 1.0"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/camera_joint" type="revolute">
    <origin rpy="0 0.6 0" xyz="1.15 0 0.4"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/camera_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <link name="rexrox/camera_link_optical">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1.6666660000000001e-12" ixy="0.0" ixz="0.0" iyy="1.6666660000000001e-12" iyz="0.0" izz="1.6666660000000001e-12"/>
    </inertial>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/camera_optical_joint" type="revolute">
    <origin rpy="-1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0"/>
    <parent link="rexrox/camera_link"/>
    <child link="rexrox/camera_link_optical"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="rexrox/camera_link">
    <sensor name="camera" type="camera">
      <update_rate>30</update_rate>
      <camera name="camera">
        <horizontal_fov>1.5125</horizontal_fov>
        <image>
          <width>768</width>
          <height>492</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3000</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.02</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <updateRate>30</updateRate>
        <cameraName>rexrox/camera</cameraName>
        <frameName>camera_link_optical</frameName>
        <attenuationR>0.0</attenuationR>
        <attenuationG>0.0</attenuationG>
        <attenuationB>0.0</attenuationB>
        <backgroundR>0</backgroundR>
        <backgroundG>0</backgroundG>
        <backgroundB>0</backgroundB>
        <!-- required for ros depth cam -->
        <imageTopicName>camera_image</imageTopicName>
        <pointCloudTopicName>camera_cloud</pointCloudTopicName>
        <depthImageTopicName>camera_depth</depthImageTopicName>
        <depthImageCameraInfoTopicName>camera_depth_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>10.0</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Sensor link -->
  <link name="rexrox/cameraright_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.1"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://uuv_sensor_ros_plugins/meshes/oe14-372.dae" scale="1.0 1.0 1.0"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/cameraright_joint" type="revolute">
    <origin rpy="0 0.6 0.4" xyz="1.15 -0.63 0.4"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/cameraright_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <link name="rexrox/cameraright_link_optical">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1.6666660000000001e-12" ixy="0.0" ixz="0.0" iyy="1.6666660000000001e-12" iyz="0.0" izz="1.6666660000000001e-12"/>
    </inertial>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/cameraright_optical_joint" type="revolute">
    <origin rpy="-1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0"/>
    <parent link="rexrox/cameraright_link"/>
    <child link="rexrox/cameraright_link_optical"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="rexrox/cameraright_link">
    <sensor name="cameraright" type="camera">
      <update_rate>30</update_rate>
      <camera name="cameraright">
        <horizontal_fov>1.5125</horizontal_fov>
        <image>
          <width>768</width>
          <height>492</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3000</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.02</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="cameraright_controller">
        <updateRate>30</updateRate>
        <cameraName>rexrox/cameraright</cameraName>
        <frameName>cameraright_link_optical</frameName>
        <attenuationR>0.0</attenuationR>
        <attenuationG>0.0</attenuationG>
        <attenuationB>0.0</attenuationB>
        <backgroundR>0</backgroundR>
        <backgroundG>0</backgroundG>
        <backgroundB>0</backgroundB>
        <!-- required for ros depth cam -->
        <imageTopicName>camera_image</imageTopicName>
        <pointCloudTopicName>camera_cloud</pointCloudTopicName>
        <depthImageTopicName>camera_depth</depthImageTopicName>
        <depthImageCameraInfoTopicName>camera_depth_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>10.0</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Sensor link -->
  <link name="rexrox/cameraleft_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.1"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://uuv_sensor_ros_plugins/meshes/oe14-372.dae" scale="1.0 1.0 1.0"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/cameraleft_joint" type="revolute">
    <origin rpy="0 0.6 -0.4" xyz="1.15 0.63 0.4"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/cameraleft_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <link name="rexrox/cameraleft_link_optical">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1.6666660000000001e-12" ixy="0.0" ixz="0.0" iyy="1.6666660000000001e-12" iyz="0.0" izz="1.6666660000000001e-12"/>
    </inertial>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 1.5707963267948966 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="rexrox/cameraleft_optical_joint" type="revolute">
    <origin rpy="-1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0"/>
    <parent link="rexrox/cameraleft_link"/>
    <child link="rexrox/cameraleft_link_optical"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="rexrox/cameraleft_link">
    <sensor name="cameraleft" type="camera">
      <update_rate>30</update_rate>
      <camera name="cameraleft">
        <horizontal_fov>1.5125</horizontal_fov>
        <image>
          <width>768</width>
          <height>492</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3000</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.02</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="cameraleft_controller">
        <updateRate>30</updateRate>
        <cameraName>rexrox/cameraleft</cameraName>
        <frameName>cameraleft_link_optical</frameName>
        <attenuationR>0.0</attenuationR>
        <attenuationG>0.0</attenuationG>
        <attenuationB>0.0</attenuationB>
        <backgroundR>0</backgroundR>
        <backgroundG>0</backgroundG>
        <backgroundB>0</backgroundB>
        <!-- required for ros depth cam -->
        <imageTopicName>camera_image</imageTopicName>
        <pointCloudTopicName>camera_cloud</pointCloudTopicName>
        <depthImageTopicName>camera_depth</depthImageTopicName>
        <depthImageCameraInfoTopicName>camera_depth_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>10.0</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>
  <!-- GPS link -->
  <link name="rexrox/gps_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- GPS joint -->
  <joint name="rexrox/gps_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/gps_link"/>
    <axis xyz="1 0 0"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo reference="rexrox/gps_link">
    <sensor name="rexrox/gps" type="gps">
      <pose>0 0 0 0 0 0</pose>
      <visualize>0</visualize>
      <always_on>1</always_on>
      <update_rate>30</update_rate>
      <gps>
        <position_sensing>
          <horizontal>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.0</stddev>
              <bias_mean>0.0</bias_mean>
              <bias_stddev>0.0</bias_stddev>
            </noise>
          </horizontal>
          <vertical>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.0</stddev>
              <bias_mean>0.0</bias_mean>
              <bias_stddev>0.0</bias_stddev>
            </noise>
          </vertical>
        </position_sensing>
        <velocity_sensing>
          <horizontal>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.0</stddev>
              <bias_mean>0.0</bias_mean>
              <bias_stddev>0.0</bias_stddev>
            </noise>
          </horizontal>
          <vertical>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.0</stddev>
              <bias_mean>0.0</bias_mean>
              <bias_stddev>0.0</bias_stddev>
            </noise>
          </vertical>
        </velocity_sensing>
      </gps>
      <plugin filename="libuuv_gazebo_ros_gps_plugin.so" name="rexrox_gazebo_gps_ros_plugin">
        <robot_namespace>rexrox</robot_namespace>
        <sensor_topic>gps</sensor_topic>
        <horizontal_pos_std_dev>0.0</horizontal_pos_std_dev>
        <vertical_pos_std_dev>0.0</vertical_pos_std_dev>
        <update_rate>30</update_rate>
        <is_on>true</is_on>
        <enable_gazebo_messages>true</enable_gazebo_messages>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Mount a 3D pose sensor -->
  <link name="rexrox/pose_sensor_link_default">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <joint name="rexrox/pose_sensor_default_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <axis xyz="0 0 1"/>
    <parent link="rexrox/base_link"/>
    <child link="rexrox/pose_sensor_link_default"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_pose_gt_plugin.so" name="pose_3d_plugin">
      <robot_namespace>rexrox</robot_namespace>
      <link_name>rexrox/base_link</link_name>
      <sensor_topic>pose_gt</sensor_topic>
      <static_reference_frame>world_ned</static_reference_frame>
      <noise_sigma>0.0</noise_sigma>
      <noise_amplitude>0.0</noise_amplitude>
      <update_rate>20</update_rate>
      <enable_gazebo_messages>false</enable_gazebo_messages>
      <publish_ned_odom>True</publish_ned_odom>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libuuv_joint_state_publisher.so" name="uuv_joint_state_publisher">
      <robotNamespace>rexrox</robotNamespace>
      <updateRate>50</updateRate>
    </plugin>
  </gazebo>
</robot>
